{"meta":{"generator":"0.8.0","format":19,"date":1533480948627},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Welcome!\nWelcome to the discord.js-plugins documentation.\n\ndiscord.js-plugins is a 3rd party framework and not affiliated with the discord.js library in any way.\n\ndiscord.js-plugins is still very much a work in progress and not suited for production use.\nThe API is also not set in stone and may change drastically as development moves forward.\nOnce we reach initial release the API will be more stable and we'll try to not make too many drastic\nbreaking changes to the API after that, any breaking changes will result in a major version update.\n\n## About\ndiscord.js-plugins is an unofficial plugin framework for [discord.js](https://discord.js.org/#/).\nIt adds a plugin manager to the main discord.js client which can be loaded/unloaded/reloaded at runtime.\n\nIt also includes some rudamentary crash handler, for when a plugin crashes. This is not perfect, but\nshould catch most basic errors that occurs within an eventhandler of a plugin, and just unload that\nspecific bad plugin rather than crashing the entire bot.\n\nIt's flexible, object oriented and makes it easy to create a modular bot.\n\n## Features\nList of features coming soon.\nThis is still early in development and features are added as I need them for my own bot\n\n## Installation\n**ONLY TESTED ON Node.js 10.5.0**  \n`npm install git+https://github.com/NbOpposite/discord.js-plugins.git`","path":"docs/general/welcome.md"}}}},"classes":[{"name":"PluginsClient","description":"Discord.js Client with a plugin framework","extends":["Client"],"construct":{"name":"PluginsClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"plugins","description":"The client's command registry","type":[[["PluginManager"]]],"meta":{"line":23,"file":"client.js","path":"src"}}],"events":[{"name":"pluginGroupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["PluginGroup"]]]},{"name":"manager","description":"Registry that the group was registered to","type":[[["PluginManager"]]]}],"meta":{"line":116,"file":"manager.js","path":"src/pluginManager"}},{"name":"pluginRegister","description":"Emitted when a plugin is registered","params":[{"name":"plugin","description":"Plugin that was registered","type":[[["Plugin"]]]},{"name":"manager","description":"Registry that the plugin was registered to","type":[[["PluginManager"]]]}],"meta":{"line":181,"file":"manager.js","path":"src/pluginManager"}}],"meta":{"line":12,"file":"client.js","path":"src"}},{"name":"Plugin","description":"A plugin that can be loaded in a client","abstract":true,"construct":{"name":"Plugin","description":"Constructor, do not initiate any on listeners {@link Client} here.\nThey can, and will be removed with {@link Plugin#stop}. Initiate\nlisteners in {@link Plugin#start} instead.","params":[{"name":"client","description":"The client the plugin is for","type":[[["Client"]]]},{"name":"info","description":"The plugin information","type":[[["PluginInfo"]]]}]},"props":[{"name":"client","description":"Client that this plugin is for","readonly":true,"type":[[["PluginsClient"]]],"meta":{"line":63,"file":"base.js","path":"src/pluginManager"}},{"name":"name","description":"Name of this plugin","type":[[["string"]]],"meta":{"line":103,"file":"base.js","path":"src/pluginManager"}},{"name":"groupID","description":"ID of the group the plugin belongs to","type":[[["string"]]],"meta":{"line":109,"file":"base.js","path":"src/pluginManager"}},{"name":"group","description":"The group the plugin belongs to, assigned upon registration","nullable":true,"type":[[["PluginGroup"]]],"meta":{"line":115,"file":"base.js","path":"src/pluginManager"}},{"name":"description","description":"Short description of the plugin","type":[[["string"]]],"meta":{"line":121,"file":"base.js","path":"src/pluginManager"}},{"name":"details","description":"Long description of the plugin","nullable":true,"type":[[["string"]]],"meta":{"line":127,"file":"base.js","path":"src/pluginManager"}},{"name":"guarded","description":"Whether the plugin is protected from being disabled","type":[[["boolean"]]],"meta":{"line":133,"file":"base.js","path":"src/pluginManager"}},{"name":"dependencies","description":"Other plugins this plugin depends on","nullable":true,"type":[[["Array"]]],"meta":{"line":139,"file":"base.js","path":"src/pluginManager"}},{"name":"autostart","description":"Whether the plugin should start on load","type":[[["boolean"]]],"meta":{"line":145,"file":"base.js","path":"src/pluginManager"}},{"name":"startOn","description":"Wait for which event to start this plugin with autostart","nullable":true,"type":[[["string"]]],"meta":{"line":151,"file":"base.js","path":"src/pluginManager"}},{"name":"started","description":"Wether this plugin is started","readonly":true,"type":[[["boolean"]]],"meta":{"line":155,"file":"base.js","path":"src/pluginManager"}},{"name":"destroyed","description":"Wether this plugin is destroyed","readonly":true,"type":[[["boolean"]]],"meta":{"line":167,"file":"base.js","path":"src/pluginManager"}}],"methods":[{"name":"reload","description":"Reload this plugin","params":[{"name":"throwOnFail","description":"Whether to rethrow any errors during reloading,\nor if to attempt a revert and just return the error.\nNOTE: It will still throw in some instances,\nif the error happened in a way that rollback would be deemed unstable, even when this is set to false.","type":[[["boolean"]]]}],"meta":{"line":71,"file":"base.js","path":"src/pluginManager"}},{"name":"unload","description":"Unload this plugin","meta":{"line":87,"file":"base.js","path":"src/pluginManager"}},{"name":"destroyed","description":"Wether this plugin is destroyed","returns":[[["boolean"]]],"meta":{"line":179,"file":"base.js","path":"src/pluginManager"}},{"name":"start","description":"Starts the plugin.\nOverload this to register any event listeners or {@link Plugin#client} here.","meta":{"line":232,"file":"base.js","path":"src/pluginManager"}},{"name":"stop","description":"Called when the plugin gets stopped. Event listeners on {@link Plugin#client} are automatically cleared.","meta":{"line":239,"file":"base.js","path":"src/pluginManager"}},{"name":"destroy","description":"Called when the plugin gets unloaded.\nUsing {@link Plugin#stop} over `Plugin#destroy` is preferred.\nWill automatically call {@link Plugin#stop} if plugin is not stopped already.","meta":{"line":248,"file":"base.js","path":"src/pluginManager"}},{"name":"validateDependencies","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"dependencies","description":"Info to validate","type":[[["DependencyInfo"]]]}],"meta":{"line":257,"file":"base.js","path":"src/pluginManager"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["Client"]]]},{"name":"info","description":"Info to validate","type":[[["PluginInfo"]]]}],"meta":{"line":281,"file":"base.js","path":"src/pluginManager"}}],"meta":{"line":38,"file":"base.js","path":"src/pluginManager"}},{"name":"EventProxyHandler","description":"{EventProxyHandler} EventProxyHandler","access":"private","methods":[{"name":"setPlugin","params":[{"name":"plugin","description":"the plugin this handler is for","type":[[["Plugin"]]]}],"meta":{"line":23,"file":"eventProxyHandler.js","path":"src/pluginManager"}}],"meta":{"line":14,"file":"eventProxyHandler.js","path":"src/pluginManager"}},{"name":"PluginManager","extends":["Collection<string,"],"construct":{"name":"PluginManager","params":[{"name":"client","description":"Client to use","type":[[["Client"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":23,"file":"manager.js","path":"src/pluginManager"}},{"name":"listeners","description":"Event listeners that each plugin has registered.","type":[[["Collection","<"],["Plugin",", "],["Collection","<"],["string",", "],["Set","<"],["function","()>>>"]]],"meta":{"line":35,"file":"manager.js","path":"src/pluginManager"}},{"name":"pluginsPath","description":"Fully resolved path to the bot's plugins directory","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"manager.js","path":"src/pluginManager"}}],"methods":[{"name":"registerGroup","description":"Registers a single group","see":["{@link PluginManager#registerGroups}"],"params":[{"name":"group","description":"A PluginGroup instance, a constructor, or the group ID","type":[[["PluginGroup"]],[["function"]],[["Object"]],[["string"]]]},{"name":"name","description":"Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be guarded (if the first argument is the group ID)","optional":true,"type":[[["boolean"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":101,"file":"manager.js","path":"src/pluginManager"}},{"name":"registerGroups","description":"Registers multiple groups","examples":["plugins.registerGroups([\n\t['fun', 'Fun'],\n\t['mod', 'Moderation']\n]);","plugins.registerGroups([\n\t{ id: 'fun', name: 'Fun' },\n\t{ id: 'mod', name: 'Moderation' }\n]);"],"params":[{"name":"groups","description":"An array of PluginGroup instances,\nconstructors, plain objects (with ID, name, and guarded properties),\nor arrays of {@link PluginManager#registerGroup} parameters","type":[[["Array","<"],["PluginGroup",">"]],[["Array","<"],["function","()>"]],[["Array","<"],["Object",">"]],[["Array","<"],["Array","<"],["string",">>"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":146,"file":"manager.js","path":"src/pluginManager"}},{"name":"loadPlugin","description":"Loads a single plugin","see":["{@link PluginManager#loadPlugins}"],"params":[{"name":"PluginClass","description":"a constructor for a Plugin","type":[[["PluginClass"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":161,"file":"manager.js","path":"src/pluginManager"}},{"name":"loadPlugins","description":"Loads a single plugin","see":["{@link PluginManager#registerPlugins}"],"params":[{"name":"pluginClasses","description":"a constructor for a Plugin","type":[[["Array","<"],["PluginClass",">"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid plugins without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":218,"file":"manager.js","path":"src/pluginManager"}},{"name":"loadPluginsIn","description":"Loads all plugins in a directory. The files must export a Plugin class constructor.","examples":["const path = require('path');\nplugins.loadPluginsIn(path.join(__dirname, 'plugins'));"],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":238,"file":"manager.js","path":"src/pluginManager"}},{"name":"reloadPlugin","description":"Reloads a plugin","params":[{"name":"plugin","description":"The plugin to reload","type":[[["Plugin"]]]},{"name":"throwOnFail","description":"Whether to rethrow any errors during reloading,\nor if to attempt a revert and just return the error.\nNOTE: It will still throw in some instances,\ndepending on what goes wrong during the reload, even when this is set to true.","default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Error"]]],"description":"Returns null if the reload was successful, otherwise returns the error thrown during the reload.","nullable":true},"meta":{"line":260,"file":"manager.js","path":"src/pluginManager"}},{"name":"unloadPlugin","description":"Unloads a plugin","params":[{"name":"plugin","description":"The plugin to unload","type":[[["Plugin"]]]}],"meta":{"line":292,"file":"manager.js","path":"src/pluginManager"}},{"name":"resolvePluginPath","description":"Resolves a plugin file path from a plugin's group ID and name","params":[{"name":"plugin","description":"Plugin to get the path for","type":[[["Plugin"]]]}],"returns":{"types":[[["string"]]],"description":"Fully-resolved path to the corresponding command file"},"meta":{"line":316,"file":"manager.js","path":"src/pluginManager"}},{"name":"crash","description":"Crash a plugin. You probably don't want to call this directly see {@link Plugin#crash}\nfor a shortcut.\n\nIf the PluginManager fails to gracefully unload (or reload for guarded plugins)\nit will crash the entire node process. Crashed plugins that fail to gracefully unload\nare considered an irrecoverable undefined state, and to prevent memoryleaks and other nasty\nstuff, PluginManager will opt to crash the entire node process after a 5 second grace period\nafter emitting a {@link Client#pluginFatal} event.","params":[{"name":"plugin","description":"The plugin that has crashed","type":[[["Plugin"]]]},{"name":"err","description":"The error that caused the crash","type":[[["Error"]]]}],"meta":{"line":345,"file":"manager.js","path":"src/pluginManager"}}],"meta":{"line":19,"file":"manager.js","path":"src/pluginManager"}},{"name":"PluginGroup","description":"A group for plugins","extends":["Collection<string,"],"construct":{"name":"PluginGroup","params":[{"name":"client","description":"The client the group is for","type":[[["PluginsClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}]},"props":[{"name":"client","description":"Client that this group is for","readonly":true,"type":[[["PluginsClient"]]],"meta":{"line":19,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":31,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":37,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":43,"file":"pluginGroup.js","path":"src/pluginManager"}}],"methods":[{"name":"stop","description":"Stops all of the group's plugins","meta":{"line":49,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"start","description":"Stops all of the group's plugins","meta":{"line":56,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"unload","description":"Unloads all of the group's plugins","meta":{"line":63,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"reload","description":"Reloads all of the group's plugins","meta":{"line":70,"file":"pluginGroup.js","path":"src/pluginManager"}}],"meta":{"line":6,"file":"pluginGroup.js","path":"src/pluginManager"}}],"interfaces":[],"typedefs":[{"name":"PluginInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the plugin (must be lowercase)","type":[[["string"]]]},{"name":"group","description":"The ID of the group the plugin belongs to (must be lowercase)","type":[[["string"]]]},{"name":"guarded","description":"Whether the plugin is protected from being disabled","optional":true,"default":false,"type":[[["string"]]]},{"name":"autostart","description":"Whether the plugin should start on load","optional":true,"default":true,"type":[[["string"]]]},{"name":"description","description":"A short description of the plugin","type":[[["string"]]]},{"name":"details","description":"A detailed description of the plugin and its functionality","optional":true,"type":[[["string"]]]}],"meta":{"line":39,"file":"base.js","path":"src/pluginManager"}},{"name":"PluginClass","type":[[["function"]]],"meta":{"line":11,"file":"manager.js","path":"src/pluginManager"}}],"externals":[{"name":"ClientOptions","meta":{"line":4,"file":"client.js","path":"src"}}]}