{"meta":{"generator":"0.8.0","format":19,"date":1533795589457},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Welcome!\nWelcome to the discord.js-plugins documentation.\n\ndiscord.js-plugins is a 3rd party framework and not affiliated with the discord.js library in any way.\n\ndiscord.js-plugins is still very much a work in progress and not suited for production use.\nThe API is also not set in stone and may change drastically as development moves forward.\nOnce we reach initial release the API will be more stable and we'll try to not make too many drastic\nbreaking changes to the API after that, any breaking changes will result in a major version update.\n\n## About\ndiscord.js-plugins is an unofficial plugin framework for [discord.js](https://discord.js.org/#/).\nIt adds a plugin manager to the main discord.js client which can be loaded/unloaded/reloaded at runtime.\n\nIt also includes some rudamentary crash handler, for when a plugin crashes. This is not perfect, but\nshould catch most basic errors that occurs within an eventhandler of a plugin, and just unload that\nspecific bad plugin rather than crashing the entire bot.\n\nIt's flexible, object oriented and makes it easy to create a modular bot.\n\n## Installation\n**ONLY TESTED ON Node.js 10.5.0**  \n`npm install NbOpposite/discord.js-plugins`","path":"docs/general/welcome.md"},"features":{"name":"Features","type":"md","content":"# Features\nHere be listed the features of discord.js-plugins\n\n## Implemented\nImplemented features that are in the library\n* Dynamic loading and unloading of plugins\n* Automatic unregistering of listeners on the main discord.js client when a plugin stops\n* Catching and localized crashing of plugins on uncaught errors originating from listeners on the client.\n\n## In progress\n* Dependency resolving, and cascading reloading of plugins that depend on a reloaded plugin\n\n## Planned\n* discord.js-commando integration, with commands depending on plugins being loaded\n* Builtin utility plugins, for logging, security breach detection etc.\n\n## Discarded\n_none as of yet_","path":"docs/general/features.md"}}}},"classes":[{"name":"PluginsClient","description":"Discord.js Client with a plugin framework","extends":["Client"],"construct":{"name":"PluginsClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["PluginsClientOptions"]]]}]},"props":[{"name":"plugins","description":"The client's plugin manager","type":[[["PluginManager"]]],"meta":{"line":27,"file":"client.js","path":"src"}}],"events":[{"name":"pluginRegister","description":"Emitted when a plugin is registered","params":[{"name":"plugin","description":"Plugin that was registered","type":[[["Plugin"]]]},{"name":"manager","description":"Registry that the plugin was registered to","type":[[["PluginManager"]]]}],"meta":{"line":36,"file":"client.js","path":"src"}},{"name":"pluginGroupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["PluginGroup"]]]},{"name":"manager","description":"Registry that the group was registered to","type":[[["PluginManager"]]]}],"meta":{"line":43,"file":"client.js","path":"src"}},{"name":"pluginError","description":"Emitted when a {@link Plugin} throws an uncaught error. When this event is emitted\nthe plugin is considered to have crashed.","params":[{"name":"plugin","description":"Plugin that errored","type":[[["Plugin"]]]},{"name":"error","description":"The thrown error","type":[[["Error"]]]}],"meta":{"line":50,"file":"client.js","path":"src"}},{"name":"pluginFatal","description":"Emitted when the {@link PluginManager} fails to unload a crashed {@link Plugin}.\nWhen this event is emitted, the client is considered to be in an\nirrecoverably unstable state, and it will disconnect the client\nand crash the process after a 5 seconds grace period to let any\nlogging finish.","params":[{"name":"plugin","description":"Plugin that errored","type":[[["Plugin"]]]},{"name":"error","description":"The error that prevented the manager from unloading the plugin","type":[[["Error"]]]}],"meta":{"line":58,"file":"client.js","path":"src"}}],"meta":{"line":16,"file":"client.js","path":"src"}},{"name":"ReversibleMap","description":"A reversible map where both keys and values must be unique and where the map can be flipped.","construct":{"name":"ReversibleMap","params":[{"name":"iterable","description":"Which iterable object to generate the initial map from.","optional":true,"type":[[["Iterable"]]]}]},"props":[{"name":"size","description":"Returns the number of key/value pairs in the `ReversibleMap` object.","readonly":true,"type":[[["number"]]],"meta":{"line":44,"file":"reversibleMap.js","path":"src"}},{"name":"reversed","description":"Reversed version of the `ReversibleMap` object.\nThis is **NOT** a copy, any changes made to the reversed\nversion of the `ReversibleMap` will reflect on the non-reversed\nversion. Also the reversed-reversed version is the same object\nas the original non-reversed version.","readonly":true,"type":[[["ReversibleMap"]]],"meta":{"line":58,"file":"reversibleMap.js","path":"src"}}],"methods":[{"name":"clear","description":"Removes all key/value pairs from the Map object.","meta":{"line":66,"file":"reversibleMap.js","path":"src"}},{"name":"delete","description":"Returns `true` if an element in the `ReversibleMap` object existed and has been removed,\nor `false` if the element does not exist.\n{@link ReversibleMap#has} will return `false` afterwards.","params":[{"name":"key","description":"The key of the element to remove from the `ReversibleMap` object.","type":[["*"]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if an element in the ReversibleMap object existed and has been removed,\nor false if the element does not exist."},"meta":{"line":80,"file":"reversibleMap.js","path":"src"}},{"name":"entries","description":"Returns a new {@link Iterator} object that contains\n**an array of `[key, value]`** for each element in the `ReversibleMap` object.","returns":{"types":[[["Iterator"]]],"description":"A new Map iterator object."},"meta":{"line":94,"file":"reversibleMap.js","path":"src"}},{"name":"forEach","description":"Calls `callback` once for each key-value pair present in the `ReversibleMap` object.\nIf a thisArg parameter is provided to forEach, it will be used as the this value for each callback.","params":[{"name":"callback","description":"Function to execute for each element.","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as this when executing `callback`.","optional":true,"type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":106,"file":"reversibleMap.js","path":"src"}},{"name":"get","description":"Returns the value associated to the `key`, or `undefined` if there is none.","params":[{"name":"key","description":"The key of the element to return from the `ReversibleMap` object.","type":[["*"]]}],"returns":{"types":[["*"]],"description":"Returns the element associated with the specified key or\nundefined if the key can't be found in the ReversibleMap object."},"meta":{"line":117,"file":"reversibleMap.js","path":"src"}},{"name":"has","description":"The `has()` method returns a boolean indicating whether an element with the specified key exists or not.","params":[{"name":"key","description":"The key of the element to test for presence in the `ReversibleMap` object.","type":[["*"]]}],"returns":{"types":[[["boolean"]]],"description":"Returns `true` if an element with the specified key exists in the\n`ReversibleMap` object; otherwise `false`."},"meta":{"line":127,"file":"reversibleMap.js","path":"src"}},{"name":"keys","description":"The `keys()` method returns a new {@link Iterator} object that contains the\nkeys for each element in the `ReversibleMap` object.","returns":{"types":[[["Iterator"]]],"description":"A new Map iterator object."},"meta":{"line":137,"file":"reversibleMap.js","path":"src"}},{"name":"set","description":"The `set()` method adds or updates an element with a specified `key` and `value` to a `ReversibleMap` object.\nNOTE: Unlike a normal map, values must be unique in this map.","params":[{"name":"key","description":"The key of the element to add to the `ReversibleMap` object.","type":[["*"]]},{"name":"val","description":"The value of the element to add to the `ReversibleMap` object.","type":[["*"]]}],"returns":{"types":[[["ReversibleMap"]]],"description":"The `ReversibleMap` object."},"meta":{"line":149,"file":"reversibleMap.js","path":"src"}}],"meta":{"line":10,"file":"reversibleMap.js","path":"src"}},{"name":"Util","description":"Contains various general-purpose utility methods.","methods":[{"name":"isConstructor","description":"Checks if the provided object is a constructor.","scope":"static","params":[{"name":"func","description":"The object to check.","type":[["*"]]}],"returns":{"types":[[["boolean"]]],"description":"True if the provided object is a constructor function, false otherwise."},"meta":{"line":13,"file":"util.js","path":"src"}},{"name":"inject","description":"Inject a {@link PluginManager} in an already existing {@link Client} object.","scope":"static","params":[{"name":"client","description":"The client object to inject plugin manager into","type":[[["Client"]]]},{"name":"options","description":"Options for the client","optional":true,"type":[[["PluginsClientOptions"]]]}],"returns":{"types":[[["PluginsClient"]]],"description":"The client object, but now with added plugin functionality!"},"meta":{"line":26,"file":"util.js","path":"src"}}],"meta":{"line":7,"file":"util.js","path":"src"}},{"name":"Plugin","description":"A plugin that can be loaded in a client","abstract":true,"construct":{"name":"Plugin","description":"Constructor, do not initiate any on listeners {@link Client} here.\nThey can, and will be removed with {@link Plugin#stop}. Initiate\nlisteners in {@link Plugin#start} instead.","params":[{"name":"client","description":"The client the plugin is for","type":[[["PluginsClient"]]]},{"name":"info","description":"The plugin information","type":[[["PluginInfo"]]]}]},"props":[{"name":"client","description":"Client that this plugin is for","readonly":true,"type":[[["PluginsClient"]]],"meta":{"line":66,"file":"base.js","path":"src/pluginManager"}},{"name":"name","description":"Name of this plugin","type":[[["string"]]],"meta":{"line":104,"file":"base.js","path":"src/pluginManager"}},{"name":"groupID","description":"ID of the group the plugin belongs to","type":[[["string"]]],"meta":{"line":110,"file":"base.js","path":"src/pluginManager"}},{"name":"group","description":"The group the plugin belongs to, assigned upon registration","nullable":true,"type":[[["PluginGroup"]]],"meta":{"line":116,"file":"base.js","path":"src/pluginManager"}},{"name":"description","description":"Short description of the plugin","type":[[["string"]]],"meta":{"line":122,"file":"base.js","path":"src/pluginManager"}},{"name":"details","description":"Long description of the plugin","nullable":true,"type":[[["string"]]],"meta":{"line":128,"file":"base.js","path":"src/pluginManager"}},{"name":"guarded","description":"Whether the plugin is protected from being disabled","type":[[["boolean"]]],"meta":{"line":134,"file":"base.js","path":"src/pluginManager"}},{"name":"dependencies","description":"Other plugins this plugin depends on","nullable":true,"type":[[["Array"]]],"meta":{"line":140,"file":"base.js","path":"src/pluginManager"}},{"name":"autostart","description":"Whether the plugin should start on load","type":[[["boolean"]]],"meta":{"line":146,"file":"base.js","path":"src/pluginManager"}},{"name":"startOn","description":"Wait for which event to start this plugin with autostart","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":152,"file":"base.js","path":"src/pluginManager"}},{"name":"started","description":"Wether this plugin is started","readonly":true,"type":[[["boolean"]]],"meta":{"line":156,"file":"base.js","path":"src/pluginManager"}},{"name":"destroyed","description":"Wether this plugin is destroyed","readonly":true,"type":[[["boolean"]]],"meta":{"line":168,"file":"base.js","path":"src/pluginManager"}}],"methods":[{"name":"reload","description":"Reload this plugin","params":[{"name":"throwOnFail","description":"Whether to rethrow any errors during reloading,\nor if to attempt a revert and just return the error.\nNOTE: It will still throw in some instances,\nif the error happened in a way that rollback would be deemed unstable, even when this is set to false.","type":[[["boolean"]]]}],"meta":{"line":74,"file":"base.js","path":"src/pluginManager"}},{"name":"unload","description":"Unload this plugin","meta":{"line":89,"file":"base.js","path":"src/pluginManager"}},{"name":"crash","description":"Crash this plugin. Should never be called manually\nunder normal circumstances. There are better ways\nto handle errors than this. This is used internally\nfor last-resort error handling. But if you're certain\nthat all else has failed and want to go trough the entire\ncrash sequence, emitting the {@link PluginsClient#pluginError}\nevent and potentially bringing down the entire process if the crash handler\nfails to unload the plugin, use this.\nIf the plugin fails to unload, a {@link PluginsClient#pluginFatal} event\nwill be emitted and the process will crash.","params":[{"name":"err","description":"The error that caused the crash.","type":[[["Error"]]]}],"meta":{"line":180,"file":"base.js","path":"src/pluginManager"}},{"name":"start","description":"Starts the plugin.<br/>\nOverload this to register any event listeners or {@link Plugin#client} here.","meta":{"line":241,"file":"base.js","path":"src/pluginManager"}},{"name":"stop","description":"Stops the plugin.<br/>\nEvent listeners on {@link Plugin#client} are automatically cleared, even if overloaded.","meta":{"line":249,"file":"base.js","path":"src/pluginManager"}},{"name":"destroy","description":"Called when the plugin gets unloaded.\nUsing {@link Plugin#stop} over `Plugin#destroy` is preferred.\nWill automatically call {@link Plugin#stop} if plugin is not stopped already.","meta":{"line":258,"file":"base.js","path":"src/pluginManager"}},{"name":"validateDependencies","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"dependencies","description":"Info to validate","type":[[["DependencyInfo"]]]}],"meta":{"line":267,"file":"base.js","path":"src/pluginManager"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["Client"]]]},{"name":"info","description":"Info to validate","type":[[["PluginInfo"]]]}],"meta":{"line":291,"file":"base.js","path":"src/pluginManager"}}],"meta":{"line":38,"file":"base.js","path":"src/pluginManager"}},{"name":"EventProxyHandler","description":"A proxy handler for {@link Client} this isolates the event listeners\non {@link Client} on a per-plugin basis and catches any errors that any\nlisteners to {@link Client} may throw.","access":"private","methods":[{"name":"setPlugin","description":"Sets the plugin for this event handler.\nThis will also cause a warning to be emitted on the plugins client object\nin the event that any listeners got registered prior to the plugin being set,\nsince this likely means that the plugin was registering listeners in the constructor.","params":[{"name":"plugin","description":"The plugin this handler is for","type":[[["Plugin"]]]}],"meta":{"line":27,"file":"eventProxyHandler.js","path":"src/pluginManager"}}],"meta":{"line":13,"file":"eventProxyHandler.js","path":"src/pluginManager"}},{"name":"PluginManager","description":"The main plugin manager. It extends `Map<string,PluginGroup`, but overrides any method that takes a `key`\nin order for you to be able to use `client.plugins.get('group:plugin')` syntax, and not have to go trough\nthe hoop of using `client.plugins.get('group').get('plugin')`.","extends":["Collection<string,PluginGroup>"],"construct":{"name":"PluginManager","params":[{"name":"client","description":"Client to use","type":[[["Client"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"manager.js","path":"src/pluginManager"}},{"name":"pluginsPath","description":"Fully resolved path to the bot's plugins directory","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"manager.js","path":"src/pluginManager"}},{"name":"crashingPlugins","description":"Plugins in the process of crashing","access":"private","type":[[["Set","<"],["Plugin",">"]]],"meta":{"line":45,"file":"manager.js","path":"src/pluginManager"}}],"methods":[{"name":"has","description":"The `has()` method returns a boolean indicating whether an element with the specified key exists or not.<br/>\nKey can be the name of a {@link PluginGroup} or the format `<groupName>:<pluginName>`.<br/>\nIf the latter it will check the existence of both the {@link PluginGroup} and if the pluginName exists.","params":[{"name":"key","description":"The key of the element to test for presence in the `PluginManager` object.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"- true if an element with the specified key exists in the PluginManager object;\notherwise false."},"meta":{"line":63,"file":"manager.js","path":"src/pluginManager"}},{"name":"get","description":"The `get()` method returns a specified element from a `PluginManager` object.<br/>\nKey can be the name of a {@link PluginGroup} or the format `<groupName>:<pluginName>`.<br/>\nIf the former, it will return a {@link PluginGroup}, if the latter it return a {@link Plugin} object.<br/>","params":[{"name":"key","description":"The key of the element to return from the `PluginManager` object.","type":[[["string"]]]}],"returns":{"types":[[["PluginGroup"]],[["Plugin"]],[["undefined"]]],"description":"- Returns the PluginGroup or Plugin object\nassociated with the specified key or undefined if the key can't be found in."},"meta":{"line":88,"file":"manager.js","path":"src/pluginManager"}},{"name":"set","description":"The `set()` method adds or updates an element with a specified key and value to the `PluginManager` object.\nKey can be the name of a {@link PluginGroup} or the format `<groupName>:<pluginName>`.<br/>\nIf the former, val should be a {@link PluginGroup}, if the latter `value` should be a {@link Plugin} object.<br/>\n**You shouldn't use this directly, instead use\n{@link PluginManager#loadPlugin} or {@link PluginManager#registerGroup}.**","params":[{"name":"key","description":"The key of the element to add to the `PluginManager` object.","type":[[["string"]]]},{"name":"value","description":"The value of the element to add to the `PluginManager` object.","type":[[["PluginGroup"]],[["Plugin"]]]}],"returns":{"types":[[["PluginManager"]]],"description":"The PluginManager object."},"meta":{"line":113,"file":"manager.js","path":"src/pluginManager"}},{"name":"registerGroup","description":"Registers a single group","see":["{@link PluginManager#registerGroups}"],"params":[{"name":"group","description":"A PluginGroup instance, a constructor, or the group ID","type":[[["PluginGroup"]],[["function"]],[["Object"]],[["string"]]]},{"name":"name","description":"Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be guarded (if the first argument is the group ID)","optional":true,"type":[[["boolean"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":138,"file":"manager.js","path":"src/pluginManager"}},{"name":"registerGroups","description":"Registers multiple groups","examples":["plugins.registerGroups([\n\t['fun', 'Fun'],\n\t['mod', 'Moderation']\n]);","plugins.registerGroups([\n\t{ id: 'fun', name: 'Fun' },\n\t{ id: 'mod', name: 'Moderation' }\n]);"],"params":[{"name":"groups","description":"An array of PluginGroup instances,\nconstructors, plain objects (with ID, name, and guarded properties),\nor arrays of {@link PluginManager#registerGroup} parameters","type":[[["Array","<"],["PluginGroup",">"]],[["Array","<"],["function","()>"]],[["Array","<"],["Object",">"]],[["Array","<"],["Array","<"],["string",">>"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":177,"file":"manager.js","path":"src/pluginManager"}},{"name":"loadPlugin","description":"Loads a single plugin","see":["{@link PluginManager#loadPlugins}"],"params":[{"name":"PluginClass","description":"a constructor for a Plugin","type":[[["Constructor","<"],["Plugin",">"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":192,"file":"manager.js","path":"src/pluginManager"}},{"name":"loadPlugins","description":"Loads an array of plugins","see":["{@link PluginManager#registerPlugins}"],"params":[{"name":"pluginClasses","description":"an array of constructors for Plugins","type":[[["Array","<"],["Constructor","<"],["Plugin",">>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid plugins without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":243,"file":"manager.js","path":"src/pluginManager"}},{"name":"loadPluginsIn","description":"Loads all plugins in a directory. The files must export a Plugin class constructor.","examples":["const path = require('path');\nplugins.loadPluginsIn(path.join(__dirname, 'plugins'));"],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":263,"file":"manager.js","path":"src/pluginManager"}},{"name":"reloadPlugin","description":"Reloads a plugin","params":[{"name":"plugin","description":"The plugin to reload","type":[[["Plugin"]]]},{"name":"throwOnFail","description":"Whether to rethrow any errors during reloading,\nor if to attempt a revert and just return the error.\nNOTE: It will still throw in some instances,\ndepending on what goes wrong during the reload, even when this is set to true.","default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Error"]]],"description":"Returns null if the reload was successful, otherwise returns the error thrown during the reload.","nullable":true},"meta":{"line":285,"file":"manager.js","path":"src/pluginManager"}},{"name":"unloadPlugin","description":"Unloads a plugin","params":[{"name":"plugin","description":"The plugin to unload","type":[[["Plugin"]]]}],"meta":{"line":317,"file":"manager.js","path":"src/pluginManager"}},{"name":"resolvePluginPath","description":"Resolves a plugin file path from a plugin's group ID and name","params":[{"name":"plugin","description":"Plugin to get the path for","type":[[["Plugin"]]]}],"returns":{"types":[[["string"]]],"description":"Fully-resolved path to the corresponding command file"},"meta":{"line":341,"file":"manager.js","path":"src/pluginManager"}},{"name":"crash","description":"Crash a plugin. You probably don't want to call this directly see {@link Plugin#crash}\nfor a shortcut.\n\nIf the PluginManager fails to gracefully unload (or reload for guarded plugins)\nit will crash the entire node process. Crashed plugins that fail to gracefully unload\nare considered an irrecoverable undefined state, and to prevent memoryleaks and other nasty\nstuff, PluginManager will opt to crash the entire node process after a 5 second grace period\nafter emitting a {@link PluginsClient#pluginFatal} event.","params":[{"name":"plugin","description":"The plugin that has crashed","type":[[["Plugin"]]]},{"name":"err","description":"The error that caused the crash","type":[[["Error"]]]}],"meta":{"line":370,"file":"manager.js","path":"src/pluginManager"}}],"meta":{"line":25,"file":"manager.js","path":"src/pluginManager"}},{"name":"PluginGroup","description":"A group for plugins","extends":["Collection<string,Plugin>"],"construct":{"name":"PluginGroup","params":[{"name":"client","description":"The client the group is for","type":[[["PluginsClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}]},"props":[{"name":"client","description":"Client that this group is for","readonly":true,"type":[[["PluginsClient"]]],"meta":{"line":19,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":31,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":37,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":43,"file":"pluginGroup.js","path":"src/pluginManager"}}],"methods":[{"name":"stop","description":"Stops all of the group's plugins","meta":{"line":49,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"start","description":"Stops all of the group's plugins","meta":{"line":56,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"unload","description":"Unloads all of the group's plugins","meta":{"line":63,"file":"pluginGroup.js","path":"src/pluginManager"}},{"name":"reload","description":"Reloads all of the group's plugins","meta":{"line":70,"file":"pluginGroup.js","path":"src/pluginManager"}}],"meta":{"line":6,"file":"pluginGroup.js","path":"src/pluginManager"}}],"interfaces":[],"typedefs":[{"name":"PluginsClientOptions","type":[[["ClientOptions"]]],"props":[{"name":"pluginFatalGracePeriod","description":"How many milliseconds to wait before crashing the bot\nforcibly after a fatal error in the plugin manager.\n(Setting this to a null will prevent the plugin manager from forcibly killing the bot.\nMake sure you listen for the {@link PluginsClient#pluginFatal} and restart/kill the bot manually if you do!)","optional":true,"default":5000,"nullable":true,"type":[[["number"]]]}],"meta":{"line":4,"file":"client.js","path":"src"}},{"name":"Iterable","type":[[["Array"]],[["string"]],[["Map"]],[["Set"]],[["Collection"]],[["Iterator"]]],"meta":{"line":4,"file":"reversibleMap.js","path":"src"}},{"name":"PluginInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the plugin (must be lowercase)","type":[[["string"]]]},{"name":"group","description":"The ID of the group the plugin belongs to (must be lowercase)","type":[[["string"]]]},{"name":"guarded","description":"Whether the plugin is protected from being disabled","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"autostart","description":"Whether the plugin should start on load","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"description","description":"A short description of the plugin","type":[[["string"]]]},{"name":"details","description":"A detailed description of the plugin and its functionality","optional":true,"type":[[["string"]]]},{"name":"startOn","description":"Wait until these events have fired from the main client.\nif multiple events are provided, it will wait until ALL events have fired at least once before starting.\n(Only relevant when `autostart` is set to true)","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]]]}],"meta":{"line":39,"file":"base.js","path":"src/pluginManager"}}],"externals":[{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":1,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":6,"file":"index.js","path":"src"}},{"name":"ClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":11,"file":"index.js","path":"src"}},{"name":"Iterator","see":["{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols}"],"meta":{"line":16,"file":"index.js","path":"src"}},{"name":"Constructor","see":["{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor}"],"meta":{"line":14,"file":"manager.js","path":"src/pluginManager"}}]}